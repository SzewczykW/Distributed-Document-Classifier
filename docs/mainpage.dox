/**
 * @mainpage Distributed Document Classifier
 * @author Wiktor Szewczyk
 *
 * @section intro Overview
 *
 * A parallel document classification engine based on GASPI (Global Address Space Programming Interface),
 * inspired by Chapter 9 of _Parallel Programming in C with MPI and OpenMP_ by Michael J. Quinn.
 *
 * This project implements a scalable managerâ€“worker architecture using GASPI's PGAS (Partitioned Global
 * Address Space) model to classify text documents into feature vectors. It uses hashing to match words
 * against a shared dictionary and distributes processing using one-sided communication.
 *
 * It currently supports only `.txt` documents.
 *
 * @section architecture Architecture
 *
 * - The **manager process** (rank 0):
 *   - creates GASPI memory segments for communication (DICT, WORK, RESULT),
 *   - reads the dictionary file (one keyword per line),
 *   - writes dictionary to shared DICT_SEGMENT for all workers,
 *   - scans the input directory for `.txt` files,
 *   - distributes file paths to workers via WORK_SEGMENT using gaspi_write_notify,
 *   - receives classified vectors from RESULT_SEGMENT and writes them to the output file.
 *
 * - Each **worker process** (rank 1 to n-1):
 *   - reads the dictionary from DICT_SEGMENT,
 *   - waits for work notifications via gaspi_notify_waitsome,
 *   - receives file paths from WORK_SEGMENT,
 *   - tokenizes and lowercases the document content,
 *   - hashes each word against a fixed-size dictionary hash table,
 *   - builds a feature vector based on word presence or frequency,
 *   - writes results to RESULT_SEGMENT using gaspi_write_notify.
 *
 * @section gaspi_segments GASPI Memory Segments
 *
 * The application uses three global memory segments:
 * - **DICT_SEGMENT_ID (0)**: Shared dictionary data
 * - **WORK_SEGMENT_ID (1)**: File assignment from manager to workers
 * - **RESULT_SEGMENT_ID (2)**: Classification results from workers to manager
 *
 * Each worker has dedicated offsets within segments to avoid memory conflicts.
 *
 * @section flow_diagram Flow Diagram
 *
 * \image html flow.png
 *
 * @section layout Project Structure
 *
 * ```
 * .
 * |- include/                        # Header files
 * |- src/                            # Core runtime: main, manager, worker, utils
 * |- tests/                          # Criterion unit tests
 * |- docs/                           # Doxygen config + generated docs
 * |- make/                           # Makefile submodules (build, test, docs, run)
 * |- scripts/gaspi_wrapper.sh        # GASPI environment wrapper script
 * |- scripts/gen_data.py             # Script for generating random data
 * |- Makefile                        # Entry point Makefile
 * |- nodes.txt                       # GASPI node configuration file
 * ```
 *
 * @section requirements Requirements
 *
 * - GCC 12+
 * - GNU Make
 * - GASPI/GPI-2 1.5.1+
 * - MPICH 4.3.0+ (for compilation compatibility)
 * - CUDA Toolkit 12.1+ (runtime libraries)
 * - (Optional) [Doxygen 1.9.8+](https://www.doxygen.nl) + [Doxygen-Awesome-CSS](https://github.com/jothepro/doxygen-awesome-css)
 * - (Optional) [Criterion 2.4.1+](https://github.com/Snaipe/Criterion) for unit testing
 *
 * @section environment Environment Setup
 *
 * Before building or running the project, you must set the required environment variables:
 *
 * ```bash
 * export GASPI_TARGET_DIR=/path/to/gpi2
 * export MPICH_TARGET_DIR=/path/to/mpich
 * export CUDA_TARGET_DIR=/path/to/cuda
 *
 * ```
 *
 * @section build Build
 *
 * @code{.sh}
 * make build
 * @endcode
 *
 * Builds the executable at:
 * ```
 * ./build/bin/ddc
 * ```
 *
 * @section run Running the Classifier
 *
 * @code{.sh}
 * make run GASPI_FLAGS='-n 8' RUN_FLAGS='input/ dict.txt out.txt'
 * @endcode
 *
 * - `GASPI_FLAGS`: passed to `gaspi_run` (default: `-n 16`)
 * - `RUN_FLAGS`: arguments for `ddc` (default: `./example/input/ ./example/dict.txt ./example/output/result.txt`)
 *
 * @section tests Running Tests
 *
 * @code{.sh}
 * make test
 * @endcode
 *
 * Runs all unit tests with Criterion.
 *
 * @section docs Documentation
 *
 * @code{.sh}
 * git submodule update --init --update
 * make docs
 * @endcode
 *
 * - HTML docs: `docs/html/index.html`
 *
 * @section license License
 *
 * MIT License. See `LICENSE` for details.
 *
 * @section references References
 *
 * - Michael J. Quinn, *Parallel Programming in C with MPI and OpenMP*, Chapter 9
 * - [GASPI/GPI-2](https://github.com/cc-hpc-itwm/GPI-2)
 * - [Criterion](https://github.com/Snaipe/Criterion)
 * - [Doxygen](https://www.doxygen.nl/)
 * - [Doxygen-Awesome-CSS](https://github.com/jothepro/doxygen-awesome-css)
 */

